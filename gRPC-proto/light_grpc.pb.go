// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gRPC_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LightClient is the client API for Light service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightClient interface {
	Handshake(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*ServerInfo, error)
	Establish(ctx context.Context, opts ...grpc.CallOption) (Light_EstablishClient, error)
}

type lightClient struct {
	cc grpc.ClientConnInterface
}

func NewLightClient(cc grpc.ClientConnInterface) LightClient {
	return &lightClient{cc}
}

func (c *lightClient) Handshake(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, "/light.Light/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightClient) Establish(ctx context.Context, opts ...grpc.CallOption) (Light_EstablishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Light_ServiceDesc.Streams[0], "/light.Light/Establish", opts...)
	if err != nil {
		return nil, err
	}
	x := &lightEstablishClient{stream}
	return x, nil
}

type Light_EstablishClient interface {
	Send(*UploadPayload) error
	Recv() (*Cmd, error)
	grpc.ClientStream
}

type lightEstablishClient struct {
	grpc.ClientStream
}

func (x *lightEstablishClient) Send(m *UploadPayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lightEstablishClient) Recv() (*Cmd, error) {
	m := new(Cmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LightServer is the server API for Light service.
// All implementations must embed UnimplementedLightServer
// for forward compatibility
type LightServer interface {
	Handshake(context.Context, *DeviceInfo) (*ServerInfo, error)
	Establish(Light_EstablishServer) error
	mustEmbedUnimplementedLightServer()
}

// UnimplementedLightServer must be embedded to have forward compatible implementations.
type UnimplementedLightServer struct {
}

func (UnimplementedLightServer) Handshake(context.Context, *DeviceInfo) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedLightServer) Establish(Light_EstablishServer) error {
	return status.Errorf(codes.Unimplemented, "method Establish not implemented")
}
func (UnimplementedLightServer) mustEmbedUnimplementedLightServer() {}

// UnsafeLightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightServer will
// result in compilation errors.
type UnsafeLightServer interface {
	mustEmbedUnimplementedLightServer()
}

func RegisterLightServer(s grpc.ServiceRegistrar, srv LightServer) {
	s.RegisterService(&Light_ServiceDesc, srv)
}

func _Light_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/light.Light/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightServer).Handshake(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Light_Establish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LightServer).Establish(&lightEstablishServer{stream})
}

type Light_EstablishServer interface {
	Send(*Cmd) error
	Recv() (*UploadPayload, error)
	grpc.ServerStream
}

type lightEstablishServer struct {
	grpc.ServerStream
}

func (x *lightEstablishServer) Send(m *Cmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lightEstablishServer) Recv() (*UploadPayload, error) {
	m := new(UploadPayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Light_ServiceDesc is the grpc.ServiceDesc for Light service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Light_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "light.Light",
	HandlerType: (*LightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _Light_Handshake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Establish",
			Handler:       _Light_Establish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "light.proto",
}
